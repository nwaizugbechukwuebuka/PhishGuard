name: PhishGuard CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # Code Quality and Security Checks
  code-quality:
    name: Code Quality & Security
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort mypy bandit safety
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi

      - name: Code formatting check (Black)
        run: black --check --diff src/ tests/

      - name: Import sorting check (isort)
        run: isort --check-only --diff src/ tests/

      - name: Linting (Flake8)
        run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

      - name: Type checking (MyPy)
        run: mypy src/ --ignore-missing-imports --no-strict-optional

      - name: Security analysis (Bandit)
        run: bandit -r src/ -f json -o bandit-report.json || true

      - name: Dependency vulnerability check (Safety)
        run: safety check --json --output safety-report.json || true

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json

  # Backend Testing
  backend-tests:
    name: Backend Tests
    runs-on: ubuntu-latest
    needs: code-quality
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: phishguard_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install pytest pytest-cov pytest-asyncio pytest-mock

      - name: Set up test environment
        run: |
          cp .env.example .env.test
          echo "DATABASE_URL=postgresql://postgres:postgres@localhost:5432/phishguard_test" >> .env.test
          echo "REDIS_URL=redis://localhost:6379/0" >> .env.test
          echo "ENVIRONMENT=testing" >> .env.test

      - name: Run database migrations
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          cd src && python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/phishguard_test
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: test-secret-key-for-ci
          ENVIRONMENT: testing

      - name: Run backend tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          pytest tests/ -v --cov=src --cov-report=xml --cov-report=html --cov-fail-under=80
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/phishguard_test
          REDIS_URL: redis://localhost:6379/0

      - name: Upload coverage reports
        if: env.CODECOV_TOKEN
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            htmlcov/
            pytest-report.xml

  # Frontend Testing
  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install frontend dependencies
        working-directory: src/frontend
        run: npm ci

      - name: Run ESLint
        working-directory: src/frontend
        run: npm run lint

      - name: Run Prettier check
        working-directory: src/frontend
        run: npm run format:check

      - name: Run frontend tests
        working-directory: src/frontend
        run: npm run test:coverage

      - name: Upload frontend coverage
        if: env.CODECOV_TOKEN
        uses: codecov/codecov-action@v4
        with:
          file: ./src/frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          token: ${{ secrets.CODECOV_TOKEN }}
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}

  # AI Model Testing
  ai-model-tests:
    name: AI Model Tests
    runs-on: ubuntu-latest
    needs: code-quality

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Install ML dependencies
        run: |
          python -m pip install --upgrade pip
          pip install scikit-learn pandas numpy joblib pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

      - name: Test AI model training
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          python src/ai_engine/train_model.py

      - name: Validate model artifacts
        run: |
          test -f phishing_classifier.pkl || exit 1
          test -f phishing_tfidf_vectorizer.pkl || exit 1
          test -f phishing_feature_scaler.pkl || exit 1
          echo "All model artifacts created successfully"

      - name: Test model inference
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          python -c "
          import pickle
          import numpy as np
          with open('phishing_classifier.pkl', 'rb') as f:
              model_data = pickle.load(f)
          model = model_data['model']
          print(f'Model type: {type(model).__name__}')
          print(f'Feature count: {len(model_data[\"feature_names\"])}')
          print('Model validation successful')
          "

      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ai-models
          path: |
            phishing_classifier.pkl
            phishing_tfidf_vectorizer.pkl
            phishing_feature_scaler.pkl

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: phishguard_integration
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: |
            requirements.txt
            requirements-dev.txt

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: src/frontend/package-lock.json

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          cd src/frontend && npm ci

      - name: Download AI models
        uses: actions/download-artifact@v4
        with:
          name: ai-models
          path: ./

      - name: Run database migrations
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          cd src && python -m alembic upgrade head
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/phishguard_integration
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: integration-test-secret-key
          ENVIRONMENT: testing

      - name: Build frontend
        working-directory: src/frontend
        run: npm run build

      - name: Start backend server
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          uvicorn src.api.main:app --host 0.0.0.0 --port 8000 &
          
          # Wait for server to start with timeout
          timeout=30
          while [ $timeout -gt 0 ] && ! curl -f http://localhost:8000/health 2>/dev/null; do
            sleep 1
            timeout=$((timeout - 1))
          done
          
          if [ $timeout -eq 0 ]; then
            echo "Server failed to start within 30 seconds"
            exit 1
          fi
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/phishguard_integration
          REDIS_URL: redis://localhost:6379/0
          SECRET_KEY: integration-test-secret-key
          ENVIRONMENT: testing

      - name: Run integration tests
        run: |
          export PYTHONPATH="${PYTHONPATH}:${PWD}/src"
          pytest tests/integration/ -v
        env:
          API_BASE_URL: http://localhost:8000

      - name: Health check
        run: |
          curl -f http://localhost:8000/health || exit 1
          curl -f http://localhost:8000/api/v1/health || exit 1

  # Build Docker Images
  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-tests, frontend-tests, ai-model-tests]
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Download AI models
        uses: actions/download-artifact@v4
        with:
          name: ai-models
          path: ./src/ai_engine/

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/frontend.Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:${{ github.sha }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Security Scanning
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    needs: build-images
    if: github.event_name != 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Snyk security scan
        if: env.SNYK_TOKEN
        uses: snyk/actions/docker@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          args: --severity-threshold=high

  # Performance Testing
  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.ref_name == 'main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install performance testing tools
        run: |
          pip install locust pytest-benchmark

      - name: Run load tests
        run: |
          # Add load testing when ready
          echo "Performance tests placeholder"

      - name: Generate performance report
        run: |
          echo "Performance test results" > performance-report.txt

      - name: Upload performance report
        uses: actions/upload-artifact@v4
        with:
          name: performance-report
          path: performance-report.txt

  # Deployment to Staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan]
    if: github.ref_name == 'develop' && github.event_name == 'push'
    environment:
      name: staging
      url: https://phishguard-staging.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_STAGING }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to staging
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.sha }}|g" deployment/k8s/*.yaml
          
          # Apply Kubernetes manifests with retry
          for i in {1..3}; do
            kubectl apply -f deployment/k8s/configmap.yaml && break
            echo "Retry $i for configmap failed"
            sleep 5
          done
          
          for i in {1..3}; do
            kubectl apply -f deployment/k8s/deployment.yaml && break
            echo "Retry $i for deployment failed"
            sleep 5
          done
          
          kubectl apply -f deployment/k8s/service.yaml
          kubectl apply -f deployment/k8s/ingress.yaml
          
          # Wait for deployment to complete with timeout
          kubectl rollout status deployment/phishguard-backend -n phishguard-staging --timeout=600s
          kubectl rollout status deployment/phishguard-frontend -n phishguard-staging --timeout=600s

      - name: Run smoke tests
        run: |
          # Wait for services to be ready with retry
          for i in {1..10}; do
            if curl -f https://phishguard-staging.example.com/health 2>/dev/null; then
              echo "Health check passed"
              break
            fi
            echo "Health check attempt $i failed, retrying in 30s..."
            sleep 30
            if [ $i -eq 10 ]; then
              echo "Health checks failed after 10 attempts"
              exit 1
            fi
          done
          
          # Additional API health checks
          curl -f https://phishguard-staging.example.com/api/v1/health || exit 1

      - name: Notify deployment status
        if: always() && env.SLACK_WEBHOOK
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#deployments'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # Deployment to Production
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-tests, security-scan, performance-tests]
    if: github.event_name == 'release' && github.event.action == 'published'
    environment:
      name: production
      url: https://phishguard.example.com

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4
        with:
          version: 'v1.28.0'

      - name: Configure kubectl
        run: |
          echo "${{ secrets.KUBE_CONFIG_PRODUCTION }}" | base64 -d > kubeconfig
          export KUBECONFIG=kubeconfig

      - name: Deploy to production
        run: |
          # Update image tags in Kubernetes manifests
          sed -i "s|IMAGE_TAG|${{ github.event.release.tag_name }}|g" deployment/k8s/*.yaml
          
          # Apply Kubernetes manifests
          kubectl apply -f deployment/k8s/configmap.yaml
          kubectl apply -f deployment/k8s/deployment.yaml
          kubectl apply -f deployment/k8s/service.yaml
          kubectl apply -f deployment/k8s/ingress.yaml
          
          # Wait for deployment to complete
          kubectl rollout status deployment/phishguard-backend -n phishguard-production
          kubectl rollout status deployment/phishguard-frontend -n phishguard-production

      - name: Run production smoke tests
        run: |
          # Wait for services to be ready
          sleep 60
          
          # Comprehensive health checks
          curl -f https://phishguard.example.com/health || exit 1
          curl -f https://phishguard.example.com/api/v1/health || exit 1
          
          # Test critical endpoints
          curl -f https://phishguard.example.com/api/v1/threats/status || exit 1

      - name: Notify production deployment
        if: always() && env.SLACK_WEBHOOK
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          channel: '#production'
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}

  # Cleanup
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()

    steps:
      - name: Clean up old artifacts
        run: |
          echo "Cleaning up old artifacts and temporary resources"
          
      - name: Generate deployment summary
        run: |
          echo "## Deployment Summary" > deployment-summary.md
          echo "- **Commit:** ${{ github.sha }}" >> deployment-summary.md
          echo "- **Branch:** ${{ github.ref_name }}" >> deployment-summary.md
          echo "- **Event:** ${{ github.event_name }}" >> deployment-summary.md
          echo "- **Timestamp:** $(date -u)" >> deployment-summary.md
          
      - name: Upload deployment summary
        uses: actions/upload-artifact@v4
        with:
          name: deployment-summary
          path: deployment-summary.md